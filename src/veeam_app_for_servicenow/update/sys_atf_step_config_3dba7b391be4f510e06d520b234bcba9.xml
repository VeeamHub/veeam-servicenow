<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step_config">
    <sys_atf_step_config action="INSERT_OR_UPDATE">
        <active>true</active>
        <batch_order_constraint/>
        <can_mutate_page>false</can_mutate_page>
        <category display_value="Server">317c4dc20b202200a8d7a12cf6673aa8</category>
        <class_name/>
        <class_type>script</class_type>
        <deprecated>false</deprecated>
        <description_generator><![CDATA[function generateDescription() {
    // the global variable 'step' represents the current glide record
    var description = "Send the outbound REST HTTP request to get an access token from the specified VBR Server";
	// your code here
	return description;
}
 generateDescription();
]]></description_generator>
        <html_description><![CDATA[<p>Send the outbound REST HTTP request to get an access token from the specified VBR Server</p>]]></html_description>
        <icon>icon-article-document</icon>
        <inputs/>
        <name>Send REST Request - Outbound - Veeam Get Access Token</name>
        <order>100</order>
        <outputs/>
        <step_env display_value="Server - Independent">6c2bcea1870312009dccc9ded0e3ecca</step_env>
        <step_execution_generator><![CDATA[// The inputs are a map of the variables defined in the inputs related list below.
// Inputs are consumed in the step configuration. Input
// values may be hardcoded or mapped from the outputs of a previous step.
// If a test author using your step uses mapping to pass in an output from a previous 
// test step then when referencing the input variable the mapping will be resolved 
// automatically
//  Example:
//      var myRecords = new GlideRecord(inputs.table);
//
// The outputs are a map of the variables defined in the outputs related list.
// Outputs should be set (assigned) in order to pass data out of a test step that
// can be consumed my mapping as an input to subsequent steps. 
//  Example:
//      outputs.table = gr.getRecordClassName()
//
//
// Note that inputs and outputs are strongly typed as defined in their variable definition.
// Their behavior is the same as a dictionary defined field of the same type in a table.
//
// The stepResult is a simple API for controlling the step pass/fail and logging with three
// methods:
//      stepResult.setFailed: Causes step to fail
//
//      stepResult.setSuccess: Causes step to succeed
//
//      stepResult.setOutputMessage: Log a message to step results after step executes.
//            Can only be called once or will overwrite previous 
//            message
//
// If neither setFailed or setSuccess is called the default is to succeed.
//
// Example usage of step timeout in script
//      var counter = 0;
//      // 'timeout' is a field on the step form
//      while (counter <= timeout) {
//            if (desiredOutcome) {
//                stepResult.setOutputMessage('Success!');
//                stepResult.setSuccess();
//                return;
//            }
//            counter++;
//
//            // When writing scripts in ATF, use waitOneSecond() instead of gs.sleep()
//            // since gs.sleep() may not work in non-global scopes
//            sn_atf.AutomatedTestingFramework.waitOneSecond();
//      }
//
//      // desired outcome did not occur within the timeout
//      stepResult.setOutputMessage('Failure!');
//      stepResult.setFailed();
//
(function executeStep(inputs, outputs, stepResult, timeout) {
	
	var responsesArr = [];
	var exceptionFlag = false;
	
	var grVeeamConnection = new GlideRecord('x_tesgh_veeam_app_veeam_connection');
	grVeeamConnection.addActiveQuery();
	grVeeamConnection.query();
	
	if (!grVeeamConnection.hasNext()) {
		stepResult.setOutputMessage('There are no active Veeam Connections in the [x_tesgh_veeam_app_veeam_connection] table.');
        stepResult.setFailed();
		return;
	}
	
	while (grVeeamConnection.next()) {
		var credentials = new sn_cc.StandardCredentialsProvider().getCredentialByID(grVeeamConnection.credential);
		
		var r = new sn_ws.RESTMessageV2('x_tesgh_veeam_app.Veeam Server', 'Get Access Token');
		r.setStringParameterNoEscape('baseUrl', grVeeamConnection.connection_url);
		r.setStringParameterNoEscape('grantType', 'password');
		r.setStringParameterNoEscape('username', credentials.getAttribute('user_name'));
		r.setStringParameterNoEscape('password', credentials.getAttribute('password'));
		r.setMIDServer(grVeeamConnection.mid_server.name);
		
		var response = r.execute();

		responsesArr.push({
			'vbrConnection': grVeeamConnection.getValue('name'),
			'statusCode': response.getStatusCode(),
			'responseBody': response.getBody()
		});
	}
	
	if (responsesArr.length) {
		responsesArr.forEach(function(el) {
			if (el.statusCode != 200) exceptionFlag = true;
		});
	}
	
	if (exceptionFlag) {
		stepResult.setOutputMessage('Failed to connect to one or more Veeam Backup & Replication servers.\nDetails: ' + JSON.stringify(responsesArr));
        stepResult.setFailed();
	} else {
		stepResult.setOutputMessage('The connection(s) to the Veeam Backup & Replication Ssrver(s) successfully passed.\nDetails: ' + JSON.stringify(responsesArr));
        stepResult.setSuccess();
	}
	
}(inputs, outputs, stepResult, timeout));
]]></step_execution_generator>
        <sys_class_name>sys_atf_step_config</sys_class_name>
        <sys_created_by>pavel.egorov</sys_created_by>
        <sys_created_on>2023-08-10 09:55:33</sys_created_on>
        <sys_id>3dba7b391be4f510e06d520b234bcba9</sys_id>
        <sys_mod_count>27</sys_mod_count>
        <sys_name>Send REST Request - Outbound - Veeam Get Access Token</sys_name>
        <sys_package display_value="Veeam App" source="x_tesgh_veeam_app">d50434871b9dd91063fd6243604bcb7b</sys_package>
        <sys_policy/>
        <sys_scope display_value="Veeam App">d50434871b9dd91063fd6243604bcb7b</sys_scope>
        <sys_update_name>sys_atf_step_config_3dba7b391be4f510e06d520b234bcba9</sys_update_name>
        <sys_updated_by>pavel.egorov</sys_updated_by>
        <sys_updated_on>2023-10-11 10:07:32</sys_updated_on>
        <template_reminder>Send REST Request - Outbound - Veeam Get Access Token</template_reminder>
        <type display_value="Test Step" name="sys_atf_step">db116c9e1b54011063fd6243604bcbe4</type>
        <wizard_redirect/>
    </sys_atf_step_config>
    <sys_translated_text action="delete_multiple" query="documentkey=3dba7b391be4f510e06d520b234bcba9"/>
    <sys_variable_value action="delete_multiple" query="document_key=3dba7b391be4f510e06d520b234bcba9"/>
</record_update>
